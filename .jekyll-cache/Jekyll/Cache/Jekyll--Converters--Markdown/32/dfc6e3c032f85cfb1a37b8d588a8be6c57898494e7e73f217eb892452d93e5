I"“o<h4 id="bienvenido-de-nuevo-">¬°Bienvenido de nuevo! üëã</h4>

<p>En esta ocasi√≥n vamos a trabajar con una <a href="https://financialmodelingprep.com/developer/docs">API Financiera</a></p>

<p>Hice este proyecto para ense√±ar una manera rapida de analizar cuantitativamente a las empresas. El ultimo a√±o estuve aprendiendo finanzas y desarrollando modelos financieros, podria decirse que soy un ‚Äúhobbyista‚Äù de las finanzas.</p>

<p><img src="/img/financial_api/modelo1.png" alt="png" /></p>

<p><img src="/img/financial_api/modelo2.png" alt="png" /></p>

<p><img src="/img/financial_api/modelo3.png" alt="png" /></p>

<p><img src="/img/financial_api/modelo4.png" alt="png" /></p>

<p>Se el dolor y el amor que podemos experimentar al crear modelos financieros. Buscar dentro de un reporte anual K10  y pasar datos a mano es un proceso lento y lleno de fricciones. Por eso hice este proyecto, esta es mi propuesta para agilizar la recolecci√≥n de datos financieros.</p>

<p>En este proyecto aprenderas sobre:</p>

<ol>
  <li>Que son las API</li>
  <li>Que es REST</li>
  <li>Que es HTTP</li>
  <li>Como extraer datos de una API</li>
  <li>Transformar los datos de JSON de una API a un dataframe de Pandas</li>
  <li>Como graficar los datos con Matplotlib y Numpy</li>
  <li>Como guardar los datos dentro de un CSV para que los manipules con en Excel, R u otra herramienta de tu agrado</li>
</ol>

<hr />

<h4 id="que-es-una-api">¬øQue es una API?</h4>

<p>Una API es una interfaz que ofrece un servicio de comunicaci√≥n. A diferencia de una UI (interfaz de usuario) que conecta a una persona con una computadora, una API conecta computadoras o software entre ellos mismos.</p>

<p>Estan hechas de diferentes partes que actuan como herramientas o servicios. Un programador puede llamar a uno de estos servicios a traves de metodos, requests o endpoints los cuales estan definidos en las espicificaciones de una API.</p>

<h4 id="que-es-rest">¬øQue es REST?</h4>

<p>REST fue propuesto por Roy Thomas en un paper titulado ‚Äú Architectural Styles and the Design of Network-based Software Architectures‚Äù. REST es un tipo de dise√±o/arquitectura al que se puede someter una API. Una de las ideas detras de REST es ver a los datos como objetos que puedes llamar, crear o destruir a trav√©s de metodos y que son representados en formato JSON, XML o RDF.</p>

<table>
  <thead>
    <tr>
      <th>Metodo</th>
      <th>Descripcion</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GET</td>
      <td>Trae informacion</td>
    </tr>
    <tr>
      <td>POST</td>
      <td>Crea informacion</td>
    </tr>
    <tr>
      <td>PUT</td>
      <td>Actualiza informacion</td>
    </tr>
    <tr>
      <td>DELETE</td>
      <td>Borra informacion</td>
    </tr>
  </tbody>
</table>

<p><a href="http://www.looah.com/source/view/2284">Como explicarle REST a tu esposa</a></p>

<p>Esto es justo lo que haremos ahora. Imaginemos a una API de arquitectura tipo REST como un ente que nos ayuda a traer datos desde una base externa. Nuestra computadora necesita comunicarse con otra y una API REST es la mejor forma de hacerlo. Para ello, utilizaremos el modulo <strong>requests</strong> de Python donde podemos enviar pedimentos HTTP de manera sencilla.</p>

<p>Pero, ¬øque es HTTP?</p>

<p>HTTP o Hypertext Transfer Protocol es un protocolo Request-Response (pedido y respuesta) cuya funcion principal es establecer una comunicaci√≥n entre sistemas de la Internet que conforman el World Wide Web (WWW).</p>

<p>Fue creado para actuar como un puente entre los clientes y servidores. Este ‚Äúpuente‚Äù tiene metodos definidos que indican acciones <em>deseadas</em> por parte de un cliente hacia un recurso especifico. Lo que el recurso represente depende de lo que se implemento en el servidor. Basicamente REST es la manera en que HTTP se debe usar.</p>

<h4 id="extrayendo-datos-de-una-api">Extrayendo datos de una API</h4>

<p>Hay 3 reglas que se deben seguir para usar una API REST.</p>
<ol>
  <li>Definir el metodo</li>
  <li>Definir los parametros</li>
  <li>Hacer el request</li>
</ol>

<p>Nuestro metodo sera de tipo GET que es lo mismo que pedir informacion de la API.</p>

<p>Nuestros parametros seran:</p>
<ol>
  <li>La llave de la API (la puedes conseguir <a href="https://financialmodelingprep.com/register">creando una cuenta</a> en el portal de la API)</li>
  <li>El ticket en la bolsa de la empresa de nuestro interes</li>
  <li>Los a√±os</li>
</ol>

<p>En esta ocasion haremos un request de datos financieros del Income Statement de NVDA.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span> 
<span class="kn">import</span> <span class="nn">json</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># DEFINIENDO PARAMETROS #
</span><span class="n">api_key</span> <span class="o">=</span> <span class="s">'Ingresa_tu_apikey_aqui'</span>
<span class="n">company</span> <span class="o">=</span> <span class="s">"NVDA"</span>
<span class="n">years</span> <span class="o">=</span> <span class="mi">5</span>
</code></pre></div></div>

<p>Si lo que quieres es su Balance Sheet o Cash Flow solo cambia esto la parte de income-statement en la URL por balance-sheet o cash-flow</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># REQUEST GET  con el package Requests.
</span><span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="sa">f</span><span class="s">'https://financialmodelingprep.com/api/v3/income-statement/</span><span class="si">{</span><span class="n">company</span><span class="si">}</span><span class="s">?limit=</span><span class="si">{</span><span class="n">years</span><span class="si">}</span><span class="s">&amp;apikey=</span><span class="si">{</span><span class="n">api_key</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">json</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="c1"># CON ESTO CREAMOS UN OBJETO de datos tipo lista.
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[{'date': '2021-01-31', 'symbol': 'NVDA', 'reportedCurrency': 'USD', 'fillingDate': '2021-02-26', 'acceptedDate': '2021-02-26 17:03:14', 'period': 'FY', 'revenue': 16675000000, 'costOfRevenue': 6279000000, 'grossProfit': 10396000000, 'grossProfitRatio': 0.623448275862069, 'researchAndDevelopmentExpenses': 3924000000, 'generalAndAdministrativeExpenses': 0.0, 'sellingAndMarketingExpenses': 0.0, 'sellingGeneralAndAdministrativeExpenses': 1940000000, 'otherExpenses': 0.0, 'operatingExpenses': 5864000000, 'costAndExpenses': 12143000000, 'interestExpense': 184000000, 'depreciationAndAmortization': 1098000000, 'ebitda': 5691000000, 'ebitdaratio': 0.34128935532233884, 'operatingIncome': 4532000000, 'operatingIncomeRatio': 0.271784107946027, 'totalOtherIncomeExpensesNet': 123000000, 'incomeBeforeTax': 4409000000, 'incomeBeforeTaxRatio': 0.26440779610194903, 'incomeTaxExpense': 77000000, 'netIncome': 4332000000, 'netIncomeRatio': 0.25979010494752625, 'eps': 1.7245222929936306, 'epsdiluted': 1.7245222929936306, 'weightedAverageShsOut': 2468000000, 'weightedAverageShsOutDil': 2512000000, 'link': 'https://www.sec.gov/Archives/edgar/data/1045810/000104581021000010/0001045810-21-000010-index.htm', 'finalLink': 'https://www.sec.gov/Archives/edgar/data/1045810/000104581021000010/nvda-20210131.htm'}, {'date': '2020-01-26', 'symbol': 'NVDA', 'reportedCurrency': 'USD', 'fillingDate': '2020-02-20 00:00:00', 'acceptedDate': '2020-02-20 16:38:18', 'period': 'FY', 'revenue': 10918000000, 'costOfRevenue': 4150000000, 'grossProfit': 6768000000, 'grossProfitRatio': 0.619893753434695, 'researchAndDevelopmentExpenses': 2829000000, 'generalAndAdministrativeExpenses': 1093000000, 'sellingAndMarketingExpenses': 0.0, 'sellingGeneralAndAdministrativeExpenses': 1093000000, 'otherExpenses': 0.0, 'operatingExpenses': 3922000000, 'costAndExpenses': 8072000000, 'interestExpense': 52000000, 'depreciationAndAmortization': 381000000, 'ebitda': 3403000000, 'ebitdaratio': 0.3116871221835501, 'operatingIncome': 2846000000, 'operatingIncomeRatio': 0.2606704524638212, 'totalOtherIncomeExpensesNet': -124000000, 'incomeBeforeTax': 2970000000, 'incomeBeforeTaxRatio': 0.27202784392745927, 'incomeTaxExpense': 174000000, 'netIncome': 2796000000, 'netIncomeRatio': 0.2560908591317091, 'eps': 1.1310679611650485, 'epsdiluted': 1.1310679611650485, 'weightedAverageShsOut': 2472000000, 'weightedAverageShsOutDil': 2472000000, 'link': 'https://www.sec.gov/Archives/edgar/data/1045810/000104581020000010/0001045810-20-000010-index.html', 'finalLink': 'https://www.sec.gov/Archives/edgar/data/1045810/000104581020000010/nvda-2020x10k.htm'}, {'date': '2019-01-27', 'symbol': 'NVDA', 'reportedCurrency': 'USD', 'fillingDate': '2019-02-21 00:00:00', 'acceptedDate': '2019-02-21 16:37:18', 'period': 'FY', 'revenue': 11716000000, 'costOfRevenue': 4545000000, 'grossProfit': 7171000000, 'grossProfitRatio': 0.6120689655172413, 'researchAndDevelopmentExpenses': 2376000000, 'generalAndAdministrativeExpenses': 991000000, 'sellingAndMarketingExpenses': 0.0, 'sellingGeneralAndAdministrativeExpenses': 991000000, 'otherExpenses': 0.0, 'operatingExpenses': 3367000000, 'costAndExpenses': 7912000000, 'interestExpense': 58000000, 'depreciationAndAmortization': 262000000, 'ebitda': 4584000000, 'ebitdaratio': 0.39125981563673606, 'operatingIncome': 3804000000, 'operatingIncomeRatio': 0.3246841925571868, 'totalOtherIncomeExpensesNet': -92000000, 'incomeBeforeTax': 3896000000, 'incomeBeforeTaxRatio': 0.33253670194605667, 'incomeTaxExpense': 123000000, 'netIncome': 4141000000, 'netIncomeRatio': 0.35344827586206895, 'eps': 1.6564, 'epsdiluted': 1.6564, 'weightedAverageShsOut': 2500000000, 'weightedAverageShsOutDil': 2500000000, 'link': 'https://www.sec.gov/Archives/edgar/data/1045810/000104581019000023/0001045810-19-000023-index.html', 'finalLink': 'https://www.sec.gov/Archives/edgar/data/1045810/000104581019000023/nvda-2019x10k.htm'}, {'date': '2018-01-28', 'symbol': 'NVDA', 'reportedCurrency': 'USD', 'fillingDate': '2018-02-28 00:00:00', 'acceptedDate': '2018-02-28 16:31:19', 'period': 'FY', 'revenue': 9714000000, 'costOfRevenue': 3892000000, 'grossProfit': 5822000000, 'grossProfitRatio': 0.5993411570928556, 'researchAndDevelopmentExpenses': 1797000000, 'generalAndAdministrativeExpenses': 815000000, 'sellingAndMarketingExpenses': 0.0, 'sellingGeneralAndAdministrativeExpenses': 815000000, 'otherExpenses': 0.0, 'operatingExpenses': 2612000000, 'costAndExpenses': 6504000000, 'interestExpense': 61000000, 'depreciationAndAmortization': 199000000, 'ebitda': 3589000000, 'ebitdaratio': 0.3694667490220301, 'operatingIncome': 3210000000, 'operatingIncomeRatio': 0.3304508956145769, 'totalOtherIncomeExpensesNet': 14000000, 'incomeBeforeTax': 3196000000, 'incomeBeforeTaxRatio': 0.3290096767551987, 'incomeTaxExpense': 282000000, 'netIncome': 3047000000, 'netIncomeRatio': 0.3136709903232448, 'eps': 1.2053006329113924, 'epsdiluted': 1.2053006329113924, 'weightedAverageShsOut': 2528000000, 'weightedAverageShsOutDil': 2528000000, 'link': 'https://www.sec.gov/Archives/edgar/data/1045810/000104581018000010/0001045810-18-000010-index.html', 'finalLink': 'https://www.sec.gov/Archives/edgar/data/1045810/000104581018000010/nvda-2018x10k.htm'}, {'date': '2017-01-29', 'symbol': 'NVDA', 'reportedCurrency': 'USD', 'fillingDate': '2017-03-01 00:00:00', 'acceptedDate': '2017-03-01 17:30:49', 'period': 'FY', 'revenue': 6910000000, 'costOfRevenue': 2847000000, 'grossProfit': 4063000000, 'grossProfitRatio': 0.5879884225759768, 'researchAndDevelopmentExpenses': 1463000000, 'generalAndAdministrativeExpenses': 663000000, 'sellingAndMarketingExpenses': 0.0, 'sellingGeneralAndAdministrativeExpenses': 666000000, 'otherExpenses': 0.0, 'operatingExpenses': 2129000000, 'costAndExpenses': 4976000000, 'interestExpense': 58000000, 'depreciationAndAmortization': 187000000, 'ebitda': 2150000000, 'ebitdaratio': 0.3111432706222865, 'operatingIncome': 1934000000, 'operatingIncomeRatio': 0.27988422575976846, 'totalOtherIncomeExpensesNet': 29000000, 'incomeBeforeTax': 1905000000, 'incomeBeforeTaxRatio': 0.27568740955137483, 'incomeTaxExpense': 239000000, 'netIncome': 1666000000, 'netIncomeRatio': 0.2410998552821997, 'eps': 0.6417565485362096, 'epsdiluted': 0.6417565485362096, 'weightedAverageShsOut': 2596000000, 'weightedAverageShsOutDil': 2596000000, 'link': 'https://www.sec.gov/Archives/edgar/data/1045810/000104581017000027/0001045810-17-000027-index.html', 'finalLink': 'https://www.sec.gov/Archives/edgar/data/1045810/000104581017000027/nvda-2017x10k.htm'}]
</code></pre></div></div>

<h4 id="transformando-los-datos-json-a-un-df">Transformando los datos JSON a un DF</h4>

<p>Trabajar con un JSON no es recomendable pues es dificil manipularlo, al final del d√≠a fueron creados para enviar y recibir informaci√≥n entre servidores pero no para ser analizados. Contrario a esto, Pandas nos permite transformarlos de una manera super sencilla a un Dataframe con el siguiente codigo.</p>

<p>Primero importamos pandas.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
</code></pre></div></div>

<p>Y despues escribimos este pedazo de codigo.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">df</span><span class="p">.</span><span class="n">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 5 entries, 0 to 4
Data columns (total 35 columns):
 #   Column                                   Non-Null Count  Dtype  
---  ------                                   --------------  -----  
 0   date                                     5 non-null      object 
 1   symbol                                   5 non-null      object 
 2   reportedCurrency                         5 non-null      object 
 3   fillingDate                              5 non-null      object 
 4   acceptedDate                             5 non-null      object 
 5   period                                   5 non-null      object 
 6   revenue                                  5 non-null      int64  
 7   costOfRevenue                            5 non-null      int64  
 8   grossProfit                              5 non-null      int64  
 9   grossProfitRatio                         5 non-null      float64
 10  researchAndDevelopmentExpenses           5 non-null      int64  
 11  generalAndAdministrativeExpenses         5 non-null      float64
 12  sellingAndMarketingExpenses              5 non-null      float64
 13  sellingGeneralAndAdministrativeExpenses  5 non-null      int64  
 14  otherExpenses                            5 non-null      float64
 15  operatingExpenses                        5 non-null      int64  
 16  costAndExpenses                          5 non-null      int64  
 17  interestExpense                          5 non-null      int64  
 18  depreciationAndAmortization              5 non-null      int64  
 19  ebitda                                   5 non-null      int64  
 20  ebitdaratio                              5 non-null      float64
 21  operatingIncome                          5 non-null      int64  
 22  operatingIncomeRatio                     5 non-null      float64
 23  totalOtherIncomeExpensesNet              5 non-null      int64  
 24  incomeBeforeTax                          5 non-null      int64  
 25  incomeBeforeTaxRatio                     5 non-null      float64
 26  incomeTaxExpense                         5 non-null      int64  
 27  netIncome                                5 non-null      int64  
 28  netIncomeRatio                           5 non-null      float64
 29  eps                                      5 non-null      float64
 30  epsdiluted                               5 non-null      float64
 31  weightedAverageShsOut                    5 non-null      int64  
 32  weightedAverageShsOutDil                 5 non-null      int64  
 33  link                                     5 non-null      object 
 34  finalLink                                5 non-null      object 
dtypes: float64(10), int64(17), object(8)
memory usage: 1.5+ KB
</code></pre></div></div>

<p>Listo. Los datos vienen sin valores nulos y estan en buen estado as√≠ que podemos analizarlos a partir de ahora. 
Lo unico que hare es quitar quitar algunas columnas como los ratios, pero no es necesario que tu lo hagas si no quieres.</p>

<p>Lo que si es necesario es que apliques un SORT. Esto te permite cambiar el orden del frame a partir de sus fechas, pues si lo graficos de esta manera los plots te saldran invertidos.</p>

<p>Con esto dropeamos o eliminalos las columnas.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'reportedCurrency'</span><span class="p">,</span> 
                      <span class="s">'fillingDate'</span><span class="p">,</span> 
                      <span class="s">'acceptedDate'</span><span class="p">,</span> 
                      <span class="s">'period'</span><span class="p">,</span> 
                      <span class="s">'link'</span><span class="p">,</span> 
                      <span class="s">'finalLink'</span><span class="p">,</span> 
                      <span class="s">'symbol'</span><span class="p">,</span> 
                      <span class="s">'grossProfitRatio'</span><span class="p">,</span> 
                      <span class="s">'incomeBeforeTaxRatio'</span><span class="p">,</span> 
                      <span class="s">'netIncomeRatio'</span><span class="p">,</span> 
                      <span class="s">'eps'</span><span class="p">,</span> 
                      <span class="s">'epsdiluted'</span><span class="p">])</span>
</code></pre></div></div>

<p>Y con esto volteamos el frame.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">"date"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="graficando-los-datos">Graficando los datos</h4>

<p>Ahora que transformamos y limpiamos los datos, es hora de hacer algunos plots para mostrarte lo facil que es graficar el frame.</p>

<ol>
  <li>Primero cargare las librerias</li>
  <li>Despues aplicare una configuraci√≥n para el tama√±o de los plots</li>
  <li>Por ultimo dividire las columnas de mi interes para que el axis de Y no arroje visualizaciones raras jaja.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### Este codigo establece la anchura y la altura de los plots (bastante util) 
</span><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="n">plt</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s">'figure.figsize'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<p>Utilizare dos metricas para comparar dentro de un periodo de 5 a√±os:</p>
<ol>
  <li>Las ventas de la compa√±ia</li>
  <li>Los costes de en los que incurre la compa√±ia para hacer esas ventas</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Este codigo te permite seleccionar las columnas de tu interes con el proposito
## de dividirlas y mejorar la visualizaci√≥n del plot
</span><span class="n">df</span><span class="p">[[</span><span class="s">"revenue"</span><span class="p">,</span> <span class="s">"costOfRevenue"</span><span class="p">]]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span><span class="s">"revenue"</span><span class="p">,</span> <span class="s">"costOfRevenue"</span><span class="p">]]</span> <span class="o">/</span> <span class="mi">1000000000</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'date'</span><span class="p">],</span> <span class="n">df</span><span class="p">[</span><span class="s">'revenue'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Crecimiento en las ventas de NVDA'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'A√±o'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Ventas totales en miles de millones de USD'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'date'</span><span class="p">],[</span><span class="s">'2017'</span><span class="p">,</span> <span class="s">'2018'</span><span class="p">,</span> <span class="s">'2019'</span><span class="p">,</span> <span class="s">'2020'</span><span class="p">,</span> <span class="s">'2021'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/img/financial_api/output1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### Localizando los datos
</span>
<span class="n">descripcion</span> <span class="o">=</span> <span class="p">[</span><span class="s">'2017'</span><span class="p">,</span> <span class="s">'2018'</span><span class="p">,</span> <span class="s">'2019'</span><span class="p">,</span> <span class="s">'2020'</span><span class="p">,</span> <span class="s">'2021'</span><span class="p">]</span>
<span class="n">revenue</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"revenue"</span><span class="p">]</span>
<span class="n">costOfRevenue</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"costOfRevenue"</span><span class="p">]</span>

<span class="c1">### Recorriendo la descripcion
</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">descripcion</span><span class="p">))</span> 
<span class="n">width</span> <span class="o">=</span> <span class="mf">0.35</span>  

<span class="c1">### Configurando los plots
</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">plot1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">revenue</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'Ventas'</span><span class="p">)</span>
<span class="n">plot2</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">costOfRevenue</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'Costo de ventas'</span><span class="p">)</span>

<span class="c1">### A√±adiendo la descripcion
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Miles de millones de USD'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Revenue vs CostOfRevenue'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xticklabels</span><span class="p">(</span><span class="n">descripcion</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>


<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/img/financial_api/output2.png" alt="png" /></p>

<h4 id="creando-un-csv">Creando un csv</h4>

<p>Si lo anterior te parecio dificil, no te preocupes. Siempre hay diferentes approachs, y de hecho, me parece que utilizar Python para este tipo de cosas (visualizar frames tan peque√±os) es innecesario. Para eso tenemos Excel.</p>

<p>Con el siguiente pedazo de codigo vas a poder crear un csv con los datos que sacaste del API y con ello poder manipularlos en tu herramienta preferida.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### Al indicar index = False eliminas las enumeraciones de cada fila. 
</span><span class="n">df</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s">'NVDA.csv'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<p>Bueno, esto es todo por hoy!</p>

<p>Espero que este proyecto te ayude con tus objetivos profesionales y no profesionales. Si necesitas ayuda siempre puedes mandarme un mensaje a joluistello@gmail.com.</p>

<p>Un abrazo!</p>

:ET